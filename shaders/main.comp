/* ---------------------------------------------------------------- *\
 * main.comp
 * Author: Gavin Ralston
 * Date Created: 2024-08-06
\* ---------------------------------------------------------------- */
#version 460

#define WORKGROUP_SIZE 8
#define LOG2K 3

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct uinfl
{
  uint int_component;
  float dec_component;
};
uinfl uinflAdd(uinfl first, uinfl second);
uinfl uinflSub(uinfl first, uinfl second);

struct ufvec3
{
  uvec3 int_component;
  vec3 dec_component;
};
ufvec3 uf3Add(in ufvec3 first, in ufvec3 second);

struct WorldLocation
{
	/*
  ivec3 int_component;
  vec3 dec_component;
	*/
	ufvec3 loc;
	uint layer;
};

struct DirectedLight
{
  vec3 direction;
  vec3 scatter_color;
  vec3 color;
};

struct Material
{
  vec3 diffuse;
  vec3 specular;
  float shininess;
  float opacity;
  float refraction_index;
};

layout (std430, binding = 0) readonly buffer indirection_pool_ssbo
{
	int indirection_pool[];
};

layout (std430, binding = 1) readonly buffer uniformity_pool_ssbo
{
	uint uniformity_pool[];
};

layout (std430, binding = 2) readonly buffer voxel_type_pool_ssbo
{
	uint voxel_type_pool[];
};

layout (std140, binding = 3) uniform num_layers_ubo
{
	int num_layers;
};

layout (std140, binding = 4) uniform focal_distance_ubo
{
	float focal_distance;
};

layout (std140, binding = 5) uniform screen_width_ubo
{
	int screen_width;
};

layout (std140, binding = 6) uniform screen_height_ubo
{
	int screen_height;
};

layout (std140, binding = 7) uniform camera_position_ubo
{
	//WorldLocation camera_position;
	ufvec3 camera_position;
};

layout (std140, binding = 8) uniform camera_right_ubo
{
	vec3 camera_right;
};

layout (std140, binding = 9) uniform camera_up_ubo
{
	vec3 camera_up;
};

layout (std140, binding = 10) uniform camera_forward_ubo
{
	vec3 camera_forward;
};

layout (std140, binding = 11) uniform sunlight_ubo
{
	DirectedLight sunlight_TMP;
};

layout (rgba32f, binding = 12) uniform image2D out_image;


struct Ray
{
	vec3 direction;
	vec3 distances_to_intersections; // TODO: convert to ufvec3
	bvec3 next_intersection_leaves_boundary;
	ufvec3 world_location;
	ufvec3 next_intersections[3];
	int previous_layer;
	float distance_traveled;
};


vec2 screen_position = vec2(gl_GlobalInvocationID.x, -gl_GlobalInvocationID.y+screen_height)/vec2(screen_width, screen_height)*2.0-1.0;

// forward function declarations
vec3 calculateMainRayDirection();
uint getVoxelType(in ufvec3 world_position);
bool rayMarch(inout Ray ray);
void findNextIntersection(inout Ray ray, in uint layer, in uint xyz_index);

uint readIndirectionPool(in uint base_location, in uint node_index);
uint readUniformityPool(in uint base_location, in uint node_index);
uint readVoxelTypePool(in uint base_location, in uint node_index);

void main()
{
	/*
	//out_image[0] = 0.0;
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(vec2(gl_GlobalInvocationID.xy/500.0), 0.0, 1.0));
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(vec2(gl_GlobalInvocationID.xy/focal_distance), 0.0, 1.0));
	imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(screen_position, 0.0, 1.0));
	int i = int(mod(gl_GlobalInvocationID.x, 512));
	i = int(gl_GlobalInvocationID.x);
	float val = float(indirection_pool[i]);
	//float val = float(indirection_pool[400]);
	imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(val, 0.0, 0.0, 1.0));
	*/

	Ray ray;
	ray.direction = calculateMainRayDirection();
	ray.world_location = camera_position;
	//ray.previous_layer = 0xFFFFFFFF; // There will probably never be this many layers, so this should safely invalidate the initial test
	ray.next_intersection_leaves_boundary = bvec3(false);
	ray.previous_layer = -1;
	ray.distance_traveled = 0.0;
	uint voxel_type = 0;
	//uint max_steps = uint(pow(8, num_layers));
	//uint max_steps = 1u << (LOG2K*(num_layers));
	uint max_steps = 32;
	uint num_steps;
	for (num_steps = 0; num_steps < max_steps; num_steps++)
	{
		if (!rayMarch(ray))
		{
			voxel_type = getVoxelType(ray.world_location);
			break;
		}
	}
	if (voxel_type == 0)
	{
		imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 1.0));
	}
	else
	{
		//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 1.0, 1.0, 1.0));
		imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(ray.world_location.dec_component, 1.0));
	}
	imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(float(num_steps)/float(max_steps)), 1.0));
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(ray.distance_traveled/float(1u<<(LOG2K*num_layers))), 1.0));
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(ray.direction, 1.0));
	return;
}


vec3 calculateMainRayDirection()
{
  vec3 x = camera_right * screen_position.x;
  vec3 y = camera_up * screen_position.y * float(screen_height) / float(screen_width);
  vec3 z = camera_forward * focal_distance;
  return normalize(x + y + z);
}


uint getVoxelType(in ufvec3 world_position)
{
	uint indirection_pointer = 0;
	uint current_node_index = 0;
	uint layer = num_layers - 1;
	uint bitfield_ander = 0xFFFFFFFFu >> (32-LOG2K);
	// starting at the top layer, descend until a uniform layer is reached
	for (; layer >= 0;)
	{
		current_node_index = 0;
		current_node_index |= ((world_position.int_component.x >> (LOG2K*layer)) & bitfield_ander);
		current_node_index |= ((world_position.int_component.y >> (LOG2K*layer)) & bitfield_ander) << LOG2K; 
		current_node_index |= ((world_position.int_component.z >> (LOG2K*layer)) & bitfield_ander) << (2*LOG2K);
		if (layer == 0) break;

		if (readUniformityPool(indirection_pointer, current_node_index) == 1)
		{
			break;
		}

		uint next_indirection_pointer = readIndirectionPool(indirection_pointer, current_node_index);
		if (next_indirection_pointer == 0)
		{
			break;
		}
		indirection_pointer = next_indirection_pointer;
		layer--;
	}
	return readVoxelTypePool(indirection_pointer, current_node_index);
}


bool rayMarch(inout Ray ray)
{
	uint indirection_pointer = 0;
	uint current_node_index = 0;
	int layer = num_layers - 1;
	uint bitfield_ander = 0xFFFFFFFFu >> (32-LOG2K);
	// discover the current layer's location within the indirection pool
	// starting at the top layer, descend until a uniform layer is reached
	for (; layer >= 0; layer--)
	{
		int bitfieldOffset = LOG2K*layer;
		current_node_index = 0;
		current_node_index |= ((ray.world_location.int_component.x >> bitfieldOffset) & bitfield_ander);
		current_node_index |= ((ray.world_location.int_component.y >> bitfieldOffset) & bitfield_ander) << LOG2K; 
		current_node_index |= ((ray.world_location.int_component.z >> bitfieldOffset) & bitfield_ander) << (2*LOG2K);
		/*
		current_node_index = bitfieldInsert(current_node_index, bitfieldExtract(ray.world_location.int_component.x, bitfieldOffset, 3), 0, 3);
		current_node_index = bitfieldInsert(current_node_index, bitfieldExtract(ray.world_location.int_component.y, bitfieldOffset, 3), 3, 3);
		current_node_index = bitfieldInsert(current_node_index, bitfieldExtract(ray.world_location.int_component.z, bitfieldOffset, 3), 6, 3);
		*/
		
		if (layer == 0) break;

		if (readUniformityPool(indirection_pointer, current_node_index) == 1)
		{
			break;
		}

		uint new_indirection_pointer = readIndirectionPool(indirection_pointer, current_node_index);
		if (new_indirection_pointer == 0)
		{
			break;
		}
		indirection_pointer = new_indirection_pointer;
	}
	uint voxel_type = readVoxelTypePool(indirection_pointer, current_node_index);
	if (voxel_type != 0)
	{
		return false;
	}

	//bvec3 axis_leaves_boundary = bvec3(false);

	//if (indirection_pointer != ray.previous_indirection_pointer || !ray.valid_indirection_pointer)
	if (layer != ray.previous_layer)
	{
		// need to find next intersections
		for (uint i = 0; i < 3; i++)
		{
			findNextIntersection(ray, layer, i);
		}
	}

	// calculate distances to each intersection
	// TODO: convert to ufvec3
	/*
	vec3 distances_to_intersections;
	distances_to_intersections.x = length((vec3(ray.next_x_intersection.int_component)+ray.next_x_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));
	distances_to_intersections.y = length((vec3(ray.next_y_intersection.int_component)+ray.next_y_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));
	distances_to_intersections.z = length((vec3(ray.next_z_intersection.int_component)+ray.next_z_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));
	*/

	float min_distance = min(min(ray.distances_to_intersections.x, ray.distances_to_intersections.y), ray.distances_to_intersections.z);
	/*
	float min_distance;
	if (distances_to_intersections.x <= distances_to_intersections.y && distances_to_intersections.x <= distances_to_intersections.z) min_distance = distances_to_intersections.x;
	else if (distances_to_intersections.y <= distances_to_intersections.z) min_distance = distances_to_intersections.y;
	else min_distance = distances_to_intersections.z;
	*/
	// step the ray forward
	uint xyz_index;
	if (ray.distances_to_intersections.x == min_distance)
	{
		xyz_index = 0;
	}
	else if (ray.distances_to_intersections.y == min_distance)
	{
		xyz_index = 1;
	}
	else
	{
		xyz_index = 2;
	}
	ray.distance_traveled += min_distance;
	ray.world_location = ray.next_intersections[xyz_index];
	ray.distances_to_intersections -= min_distance;

	if (ray.next_intersection_leaves_boundary[xyz_index])
	{
		//ray.world_location.int_component[xyz_index] += int(sign(ray.direction[xyz_index]));
		if (ray.direction[xyz_index] >= 0.0)
		{
			ray.world_location.int_component[xyz_index]--;
			ray.world_location.dec_component[xyz_index] = 1.0;
		}
		else
		{
			ray.world_location.int_component[xyz_index]++;
			ray.world_location.dec_component[xyz_index] = 0.0;
		}
		return false;
	}

	// find new next intersection
	findNextIntersection(ray, layer, xyz_index);

	ray.previous_layer = layer;

	return true;
}


void findNextIntersection(inout Ray ray, in uint layer, in uint xyz_index)
{
	ufvec3 next_intersection = ray.world_location;

	// find location of the outer edge in the general direction of the ray
	uinfl outer_edge_location;
	uint max_value_within_layer_single_axis = (0xFFFFFFFFu >> (32-(LOG2K*layer)));
	if (layer == 0) max_value_within_layer_single_axis = 0u; // 1 >> 1 = 1: special case
	bool axis_leaves_boundary = false;

	uinfl difference;
	if (ray.direction[xyz_index] >= 0.0)
	{
		outer_edge_location.int_component = (ray.world_location.int_component[xyz_index] | max_value_within_layer_single_axis) + 1;
		outer_edge_location.dec_component = 0.0;
		difference.int_component = (outer_edge_location.int_component - 1) - ray.world_location.int_component[xyz_index];
		difference.dec_component = 1.0 - ray.world_location.dec_component[xyz_index];

		if (outer_edge_location.int_component - 1 == (0xFFFFFFFFu >> (32-(LOG2K*num_layers))))
			axis_leaves_boundary = true;
	}
	else
	{
		outer_edge_location.int_component = (ray.world_location.int_component[xyz_index] & ~max_value_within_layer_single_axis) - 1;
		outer_edge_location.dec_component = 1.0;
		difference.int_component = ray.world_location.int_component[xyz_index] - (outer_edge_location.int_component + 1);
		difference.dec_component = ray.world_location.dec_component[xyz_index];

		if (outer_edge_location.int_component + 1 == 0u)
			axis_leaves_boundary = true;
	}


	// solve for next intersections
	/*
	float tmp = float(differences.int_component) / ray.direction;
	ufvec3 tmp_ivec3;
	tmp_ivec3.int_component = uvec3(tmp);
	tmp_ivec3.dec_component = tmp - vec3(tmp_vec3.int_component);
	ufvec3 tmp_vec3;
	tmp_vec3.int_component = uvec3(0);
	tmp_vec3.dec_component = differences.dec_component / ray.direction;
	ufvec3 travel_multipliers = uf3Add(tmp_ivec3, tmp_vec3);
	*/

	// solve for next intersection
	// TODO: use uinfl for travel_multiplier - current method is lossy at higher values
	float euclidean_distance = (float(difference.int_component) + difference.dec_component) / abs(ray.direction[xyz_index]);

	// solve for next intersection
	next_intersection.int_component[xyz_index] = outer_edge_location.int_component;
	next_intersection.dec_component[xyz_index] = outer_edge_location.dec_component;

	for (uint i = 1; i < 3; i++)
	{
		uint anti_xyz_index = uint(mod(xyz_index+i, 3));
		float tmp = float(ray.world_location.int_component[anti_xyz_index]) + ray.world_location.dec_component[anti_xyz_index];
		tmp += ray.direction[anti_xyz_index] * euclidean_distance;
		next_intersection.int_component[anti_xyz_index] = uint(tmp);
		next_intersection.dec_component[anti_xyz_index] = tmp - float(next_intersection.int_component[anti_xyz_index]);
	}

	ray.next_intersections[xyz_index] = next_intersection;

	ray.next_intersection_leaves_boundary[xyz_index] = axis_leaves_boundary;
	//ray.distances_to_intersections[xyz_index] = (float(difference.int_component) + difference.dec_component) / abs(ray.direction[xyz_index]);
	ray.distances_to_intersections[xyz_index] = euclidean_distance;
	//ray.distances_to_intersections[xyz_index] = length((vec3(next_intersection.int_component)+next_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));

	return;
}


ufvec3 uf3Add(in ufvec3 first, in ufvec3 second)
{
	ufvec3 result;
	result.int_component = first.int_component + second.int_component;
	result.dec_component = first.dec_component + second.dec_component;
	if (result.dec_component.x >= 1.0)
	{
		result.dec_component.x -= 1.0;
		result.int_component.x += 1;
	}
	if (result.dec_component.x < 0.0)
	{
		result.dec_component.x += 1.0;
		result.int_component.x -= 1;
	}
	if (result.dec_component.y >= 1.0)
	{
		result.dec_component.y -= 1.0;
		result.int_component.y += 1;
	}
	if (result.dec_component.y < 0.0)
	{
		result.dec_component.y += 1.0;
		result.int_component.y -= 1;
	}
	if (result.dec_component.z >= 1.0)
	{
		result.dec_component.z -= 1.0;
		result.int_component.z += 1;
	}
	if (result.dec_component.z < 0.0)
	{
		result.dec_component.z += 1.0;
		result.int_component.z -= 1;
	}

	return result;
}


uint readIndirectionPool(in uint base_location, in uint node_index)
{
	return indirection_pool[(base_location << (3*LOG2K)) | node_index];
}


uint readUniformityPool(in uint base_location, in uint node_index)
{
	uint index_preunpack = (base_location << (3*LOG2K)) | node_index;
	uint true_index = index_preunpack >> 5;
	uint bit_location = index_preunpack & 0x1F;
	return ((uniformity_pool[true_index] >> bit_location) & 1);
}


uint readVoxelTypePool(in uint base_location, in uint node_index)
{
	return voxel_type_pool[(base_location << (3*LOG2K)) | node_index];
}
