/* ---------------------------------------------------------------- *\
 * main.comp
 * Author: Gavin Ralston
 * Date Created: 2024-08-06
\* ---------------------------------------------------------------- */
#version 460

#define WORKGROUP_SIZE 8
#define LOG2K 1
#define MAX_NUM_LAYERS 32


#define UINT_BITS 32
#define UINT_MAX 0xFFFFFFFFu

#define MASK_SIZE 3 // number of bits a mask takes up
#define MASKLIST_INDEX_SIZE 2 // number of bits a masklist index takes up

#define MASK_LIST_SIZE 3 // ceil(MAX_NUM_LAYERS*MASK_SIZE/UINT_BITS)
#define MASKLIST_INDICES_LIST_SIZE 2 // ceil(MAX_NUM_LAYERS*MASKLIST_INDEX_SIZE/UINT_BITS)
#define NUM_MASKS_PER_ELEMENT 10 // ceil(UINT_BITS/MASK_SIZE)
#define NUM_MLI_PER_ELEMENT 16 // ceil(UINT_BITS/MASKLIST_INDEX_SIZE)

//#define VISUALIZE_INTERSECTIONS 150

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

struct uinfl
{
  uint int_component;
  float dec_component;
};
uinfl uinflAdd(uinfl first, uinfl second);
uinfl uinflSub(uinfl first, uinfl second);

struct ufvec3
{
  uvec3 int_component;
  vec3 dec_component;
};
ufvec3 uf3Add(in ufvec3 first, in ufvec3 second);

struct WorldLocation
{
	/*
  ivec3 int_component;
  vec3 dec_component;
	*/
	ufvec3 loc;
	uint layer;
};

struct DirectedLight
{
  vec3 direction;
  vec3 scatter_color;
  vec3 color;
};

struct Material
{
  vec4 color;
};

struct OctreeNode
{
	int indirection;
	uint voxel_type;
};

layout (std430, binding = 0) readonly buffer materials_ssbo
{
	Material materials[];
};

layout (std430, binding = 1) readonly buffer octree_ssbo
{
	OctreeNode octree[];
};

layout (std140, binding = 2) uniform num_layers_ubo
{
	int num_layers;
};

layout (std140, binding = 3) uniform focal_distance_ubo
{
	float focal_distance;
};

layout (std140, binding = 4) uniform screen_width_ubo
{
	int screen_width;
};

layout (std140, binding = 5) uniform screen_height_ubo
{
	int screen_height;
};

layout (std140, binding = 6) uniform camera_position_ubo
{
	//WorldLocation camera_position;
	ufvec3 camera_position;
};

layout (std140, binding = 7) uniform camera_right_ubo
{
	vec3 camera_right;
};

layout (std140, binding = 8) uniform camera_up_ubo
{
	vec3 camera_up;
};

layout (std140, binding = 9) uniform camera_forward_ubo
{
	vec3 camera_forward;
};

layout (std140, binding = 10) uniform sunlight_ubo
{
	DirectedLight sunlight_TMP;
};

layout (rgba32f, binding = 11) uniform image2D out_image;


struct Ray
{
	vec3 direction;
	vec3 distances_to_intersections; // TODO: convert to ufvec3
	bvec3 next_intersection_leaves_boundary;
	ufvec3 world_location;
	ufvec3 next_intersections[3];
	int previous_layer;
	float distance_traveled;
	uint num_intersections;
};


vec2 screen_position = vec2(gl_GlobalInvocationID.x, -gl_GlobalInvocationID.y+screen_height)/vec2(screen_width, screen_height)*2.0-1.0;

// forward function declarations
vec3 calculateMainRayDirection();
uint getVoxelType(in ufvec3 world_position);
uint rayMarchHero(inout Ray ray);
uint rayMarch(inout Ray ray);
bool rayMarchSingleStep(inout Ray ray);
void findNextIntersection(inout Ray ray, in uint layer, in uint xyz_index);

uint readIndirectionPool(in uint base_location, in uint node_index);
uint readUniformityPool(in uint base_location, in uint node_index);
uint readVoxelTypePool(in uint base_location, in uint node_index);

void main()
{
	Ray ray;
	ray.direction = calculateMainRayDirection();
	ray.world_location = camera_position;
	ray.next_intersection_leaves_boundary = bvec3(false);
	ray.previous_layer = -1;
	ray.distance_traveled = 0.0;
	ray.num_intersections = 0;
	uint voxel_type = 0;
	vec4 color = vec4(0.0);
	//voxel_type = rayMarch(ray);
	voxel_type = rayMarchHero(ray);
	color = materials[voxel_type].color;
#ifdef VISUALIZE_INTERSECTIONS
	vec4 intersections_visualization = vec4(vec3(float(ray.num_intersections)/VISUALIZE_INTERSECTIONS), 1.0);
	imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), intersections_visualization);
	return;
#endif // VISUALIZE_INTERSECTIONS
	/*
	imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(ray.world_location.dec_component, 1.0));
	return;
	*/

	//ray.direction = normalize(vec3(0.1, 1.0, 0.2));
	ray.direction = normalize(vec3(1.0, 0.7, -0.1));
	uint bounce1_voxel_type = rayMarchHero(ray);
	if (bounce1_voxel_type != 0)
	{
		color *= 0.5;
		color.w = 1.0;
	}
	imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), color);
	//if (voxel_type != 0) imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(ray.world_location.dec_component, 1.0));
	//max_steps = 32;
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(float(num_steps)/float(max_steps)), 1.0));
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(ray.distance_traveled/float(1u<<(LOG2K*num_layers))), 1.0));
	//imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(ray.direction, 1.0));
	return;
}


vec3 calculateMainRayDirection()
{
  vec3 x = camera_right * screen_position.x;
  vec3 y = camera_up * screen_position.y * float(screen_height) / float(screen_width);
  vec3 z = camera_forward * focal_distance;
  return normalize(x + y + z);
}


uint getVoxelType(in ufvec3 world_position)
{
	uint indirection_pointer = 0;
	uint current_node_index = 0;
	uint layer = num_layers - 1;
	uint bitfield_ander = UINT_MAX >> (32-LOG2K);
	// starting at the top layer, descend until a uniform layer is reached
	for (; layer >= 0;)
	{
		current_node_index = 0;
		current_node_index |= ((world_position.int_component.x >> (LOG2K*layer)) & bitfield_ander);
		current_node_index |= ((world_position.int_component.y >> (LOG2K*layer)) & bitfield_ander) << LOG2K; 
		current_node_index |= ((world_position.int_component.z >> (LOG2K*layer)) & bitfield_ander) << (2*LOG2K);
		if (layer == 0) break;

		if (readUniformityPool(indirection_pointer, current_node_index) == 1)
		{
			break;
		}

		uint next_indirection_pointer = readIndirectionPool(indirection_pointer, current_node_index);
		if (next_indirection_pointer == 0)
		{
			break;
		}
		indirection_pointer = next_indirection_pointer;
		layer--;
	}
	return readVoxelTypePool(indirection_pointer, current_node_index);
}


uvec3 generateMasklist(in vec3 s_mid)
{
	uvec3 masklist = uvec3(0);
	uint A = (s_mid.x < s_mid.y) ? 1 : 0;
	uint B = (s_mid.x < s_mid.z) ? 1 : 0;
	uint C = (s_mid.y < s_mid.z) ? 1 : 0;
	masklist[0] |= ((~(B | C)) & 1u) << 2;
	masklist[0] |= ((~A & C) & 1u) << 1;
	masklist[0] |= ((A & B) & 1u);
	masklist[1] |= ((B ^ C) & 1u) << 2;
	masklist[1] |= ((~(A ^ C)) & 1u) << 1;
	masklist[1] |= ((A ^ B) & 1u);
	masklist[2] |= ((B & C) & 1u) << 2;
	masklist[2] |= ((A & ~C) & 1u) << 1;
	masklist[2] |= (~(A | B) & 1u);
	return masklist;
}


uint rayMarchHero(inout Ray ray)
{
	// HERO!!!!
	// TODO: node_max and everything that follows has overflow issues when the world has 32 layers
	uint voxel_type = 0;
	vec3 v = ray.direction;
	vec3 E = vec3(ray.world_location.int_component) + vec3(ray.world_location.dec_component);
	float eps = 0.001;
	if (abs(v.x) < eps) v.x = (v.x == 0.0) ? eps : eps*sign(v.x);
	if (abs(v.y) < eps) v.y = (v.y == 0.0) ? eps : eps*sign(v.y);
	if (abs(v.z) < eps) v.z = (v.z == 0.0) ? eps : eps*sign(v.z);
	v = normalize(v);
	vec3 v_reciprocal = vec3(1.0)/v;

	uint vmask = 0u;
	vmask |= ((v.x < 0.0) ? 1u : 0u);
	vmask |= ((v.y < 0.0) ? 2u : 0u);
	vmask |= ((v.z < 0.0) ? 4u : 0u);

	uint indirection_pointers[MAX_NUM_LAYERS];

	float s_l_maxes[MAX_NUM_LAYERS];
	float s_u_mins[MAX_NUM_LAYERS];
	vec3 s_mids[MAX_NUM_LAYERS];
	uint childmasks[MASK_LIST_SIZE];
	uint lastmasks[MASK_LIST_SIZE];
	uvec3 masklists[MASK_LIST_SIZE];
	uint masklist_indices[MASKLIST_INDICES_LIST_SIZE];

	uvec3 node_mids[MAX_NUM_LAYERS];

	// find initial ray location information
	uvec3 node_min = uvec3(0);
	//node_maxes[0] = uvec3((0xFFFFFFFFu >> (32-(num_layers*LOG2K))) + 1u);
	uvec3 node_max = uvec3(0x1u << num_layers); // TODO: bad!!! check above. better, only slightly. overflow!
	node_mids[0] = ((node_max - node_min) >> 1) + node_min;

	vec3 s_min = (vec3(node_min) - E) * v_reciprocal;
	vec3 s_max = (vec3(node_max) - E) * v_reciprocal;
	s_mids[0] = (vec3(node_mids[0]) - E) * v_reciprocal;

	//masklists[0] = generateMasklist(s_mids[0]);
	uint last_mask_index, mask_index = 0;
	int last_mask_bitfield_offset, mask_bitfield_offset = 0;
	uint last_childmask, childmask;
	uint last_lastmask, lastmask;
	uvec3 last_masklist, masklist;
	masklists[mask_index] = bitfieldInsert(masklists[mask_index], generateMasklist(s_mids[0]), mask_bitfield_offset, MASK_SIZE);

	vec3 s_lower;
	s_lower.x = ((vmask & 1u) == 0) ? s_min.x : s_max.x;
	s_lower.y = ((vmask & 2u) == 0) ? s_min.y : s_max.y;
	s_lower.z = ((vmask & 4u) == 0) ? s_min.z : s_max.z;
	vec3 s_upper;
	s_upper.x = ((vmask & 1u) == 0) ? s_max.x : s_min.x;
	s_upper.y = ((vmask & 2u) == 0) ? s_max.y : s_min.y;
	s_upper.z = ((vmask & 4u) == 0) ? s_max.z : s_min.z;

	s_l_maxes[0] = max(max(s_lower.x, s_lower.y), s_lower.z);
	s_u_mins[0] = min(min(s_upper.x, s_upper.y), s_upper.z);

	childmask = 0u;
	childmask |= (s_mids[0].x < s_l_maxes[0]) ? 1u : 0u;
	childmask |= (s_mids[0].y < s_l_maxes[0]) ? 2u : 0u;
	childmask |= (s_mids[0].z < s_l_maxes[0]) ? 4u : 0u;
	lastmask = 0u;
	lastmask |= (s_mids[0].x < s_u_mins[0]) ? 1u : 0u;
	lastmask |= (s_mids[0].y < s_u_mins[0]) ? 2u : 0u;
	lastmask |= (s_mids[0].z < s_u_mins[0]) ? 4u : 0u;
	childmasks[mask_index] = bitfieldInsert(childmasks[mask_index], childmask, mask_bitfield_offset, MASK_SIZE);
	lastmasks[mask_index] = bitfieldInsert(lastmasks[mask_index], lastmask, mask_bitfield_offset, MASK_SIZE);

	//masklist_indices[0] = 0;
	//NOTE: mli = masklist_indices
	uint last_mli_index, mli_index = 0;
	int last_mli_bitfield_offset, mli_bitfield_offset = 0;
	masklist_indices[mli_index] = bitfieldInsert(masklist_indices[mli_index], 0, mli_bitfield_offset, MASKLIST_INDEX_SIZE);


	indirection_pointers[0] = 0;
	uint layer = num_layers - 1;
	uint slmask = 0u;

	// main loop
	bool entered_new_node = true;
	bool in_first_child = true;
	for (uint i = 0; i < 100000000; i++)
	{
		if (layer >= num_layers) break; // we must have reached the end of the world. exit

		uint idx = num_layers-layer;

		//uint this_child_index = childmasks[idx-1] ^ vmask;

		// set up bitfield helpers
		mask_index = idx / NUM_MASKS_PER_ELEMENT;
		mask_bitfield_offset = MASK_SIZE*int(idx - (mask_index * NUM_MASKS_PER_ELEMENT));
		last_mask_index = (idx-1) / NUM_MASKS_PER_ELEMENT;
		last_mask_bitfield_offset = MASK_SIZE*int((idx-1) - (last_mask_index * NUM_MASKS_PER_ELEMENT));
		mli_index = idx / NUM_MLI_PER_ELEMENT;
		mli_bitfield_offset = MASKLIST_INDEX_SIZE*int(idx - (mli_index * NUM_MLI_PER_ELEMENT));
		last_mli_index = (idx-1) / NUM_MLI_PER_ELEMENT;
		last_mli_bitfield_offset = MASKLIST_INDEX_SIZE*int((idx-1) - (last_mli_index * NUM_MLI_PER_ELEMENT));

		last_childmask = bitfieldExtract(childmasks[last_mask_index], last_mask_bitfield_offset, MASK_SIZE);
		last_lastmask = bitfieldExtract(lastmasks[last_mask_index], last_mask_bitfield_offset, MASK_SIZE);
		masklist = bitfieldExtract(masklists[mask_index], mask_bitfield_offset, MASK_SIZE);
		last_masklist = bitfieldExtract(masklists[last_mask_index], last_mask_bitfield_offset, MASK_SIZE);

		uint this_child_index = last_childmask ^ vmask;

		if (entered_new_node)
		{
			ray.num_intersections++;
			// if the ray has reached a terminal octree node, get the material index (voxel type)
			if ((layer == 0) || (readUniformityPool(indirection_pointers[idx-1], this_child_index) == 1))
			{
				voxel_type = readVoxelTypePool(indirection_pointers[idx-1], this_child_index);
				if (voxel_type != 0)
				{
					uint child_axis_size = 1u << layer;
					for (uint j = 0; j < 3; j++)
					{
						if ((this_child_index & (1u << j)) != 0)
						{
							node_min[j] = node_mids[idx-1][j];
							node_max[j] = node_mids[idx-1][j] + child_axis_size;
						}
						else
						{
							node_min[j] = node_mids[idx-1][j] - child_axis_size;
							node_max[j] = node_mids[idx-1][j];
						}
					}
					s_min = (vec3(node_min) - E) * v_reciprocal;
					s_max = (vec3(node_max) - E) * v_reciprocal;
					for (uint j = 0; j < 3; j++)
					{
						if ((vmask & (1u << j)) == 0)
							s_lower[j] = s_min[j];
						else
							s_lower[j] = s_max[j];
					}
					ray.distance_traveled = max(max(s_lower.x, s_lower.y), s_lower.z);
					break;
				}

				// if air, check if this is the last node to be searched within its parent
				if (last_childmask == last_lastmask)
				{
					layer++;
					entered_new_node = false;
					continue;
				}

				// if air and not the last node to be searched within its parent, find the next sister node
				uint last_masklist_index = bitfieldExtract(masklist_indices[last_mli_index], last_mli_bitfield_offset, MASKLIST_INDEX_SIZE);
				while ((last_masklist[last_masklist_index] & last_childmask) != 0u)
				{
					// find next valid masklist element
					//masklist_indices[idx-1]++;
					last_masklist_index++;
					masklist_indices[last_mli_index] = bitfieldInsert(masklist_indices[last_mli_index], last_masklist_index, last_mli_bitfield_offset, MASKLIST_INDEX_SIZE);
				}
				// now re-generate childmask
				//childmasks[idx-1] |= masklists[idx-1][masklist_indices[idx-1]];
				childmasks[last_mask_index] = bitfieldInsert(childmasks[last_mask_index], last_childmask | last_masklist[last_masklist_index], last_mask_bitfield_offset, MASK_SIZE);
				slmask = last_masklist[last_masklist_index];
				entered_new_node = true;
				in_first_child = false;
				continue;
			}
			// if not terminal, prepare to descend into children
			else
			{
				uint distance_from_last_node_mid = 1u << (layer-1);
				// Take the last node midplanes, find the distance from that layer's midplane to this layer's midplane, and compute the new midplanes
				for (uint j = 0; j < 3; j++)
				{
					if ((this_child_index & (1u << j)) != 0)
						node_mids[idx][j] = node_mids[idx-1][j] + distance_from_last_node_mid;
					else
						node_mids[idx][j] = node_mids[idx-1][j] - distance_from_last_node_mid;
				}
				node_min = node_mids[idx] - distance_from_last_node_mid;
				node_max = node_mids[idx] + distance_from_last_node_mid;

				s_min = (vec3(node_min) - E) * v_reciprocal;
				s_max = (vec3(node_max) - E) * v_reciprocal;
				s_mids[idx] = (vec3(node_mids[idx]) - E) * v_reciprocal;
				//masklists[idx] = generateMasklist(s_mids[idx]);
				masklists[mask_index] = bitfieldInsert(masklists[mask_index], generateMasklist(s_mids[idx]), mask_bitfield_offset, MASK_SIZE);

				for (uint j = 0; j < 3; j++)
				{
					if ((vmask & (1u << j)) == 0)
					{
						s_lower[j] = s_min[j];
						s_upper[j] = s_max[j];
					}
					else
					{
						s_lower[j] = s_max[j];
						s_upper[j] = s_min[j];
					}
				}

				s_l_maxes[idx] = max(max(s_lower.x, s_lower.y), s_lower.z);
				s_u_mins[idx] = min(min(s_upper.x, s_upper.y), s_upper.z);

				childmask = 0u;
				for (uint axis = 0; axis < 3; axis++)
				{
					if (s_mids[idx][axis] < 0.0)
						childmask |= (1u << axis);
					else
						childmask |= (s_mids[idx][axis] < s_l_maxes[idx]) ? (1u << axis) : 0u;
				}
				lastmask = 0u;
				lastmask |= (s_mids[idx].x < s_u_mins[idx]) ? 1u : 0u;
				lastmask |= (s_mids[idx].y < s_u_mins[idx]) ? 2u : 0u;
				lastmask |= (s_mids[idx].z < s_u_mins[idx]) ? 4u : 0u;
				childmasks[mask_index] = bitfieldInsert(childmasks[mask_index], childmask, mask_bitfield_offset, MASK_SIZE);
				lastmasks[mask_index] = bitfieldInsert(lastmasks[mask_index], lastmask, mask_bitfield_offset, MASK_SIZE);

				masklist_indices[mli_index] = bitfieldInsert(masklist_indices[mli_index], 0, mli_bitfield_offset, MASKLIST_INDEX_SIZE);
				//distance_traveled = s_l_maxes[idx];


				// if this node is behind the ray's origin, skip it
				if (s_u_mins[idx] < s_l_maxes[idx] || s_u_mins[idx] < 0.0)
				{
					if (last_childmask == last_lastmask)
					{
						layer++;
						entered_new_node = false;
						continue;
					}

					bool continue_main_loop = false;
					//while ((masklists[idx-1][masklist_indices[idx-1]] & last_childmask) != 0u)
					//while ((last_masklist[masklist_indices[idx-1]] & last_childmask) != 0u)
					uint last_masklist_index = bitfieldExtract(masklist_indices[last_mli_index], last_mli_bitfield_offset, MASKLIST_INDEX_SIZE);
					while ((last_masklist[last_masklist_index] & last_childmask) != 0u)
					{
						//if (masklist_indices[idx-1] == 2)
						if (last_masklist_index == 2)
						{
							layer++;
							entered_new_node = false;
							continue_main_loop = true;
							break;
						}
						// find next valid masklist element
						//masklist_indices[idx-1]++;
						last_masklist_index++;
						masklist_indices[last_mli_index] = bitfieldInsert(masklist_indices[last_mli_index], last_masklist_index, last_mli_bitfield_offset, MASKLIST_INDEX_SIZE);
					}
					if (continue_main_loop) continue;
					// now re-generate childmask
					//childmasks[idx-1] |= masklists[idx-1][masklist_indices[idx-1]];
					childmasks[last_mask_index] = bitfieldInsert(childmasks[last_mask_index], last_childmask | last_masklist[last_masklist_index], last_mask_bitfield_offset, MASK_SIZE);
					slmask = last_masklist[last_masklist_index];
					entered_new_node = true;
					in_first_child = false;
					continue;
				}
				// now go actually search the children
				indirection_pointers[idx] = readIndirectionPool(indirection_pointers[idx-1], this_child_index);
				layer--;
				entered_new_node = true;
				in_first_child = true;
				continue;
			}
		}


		// the only time we will ever return to a node from one of its children is if all children have been searched.
		// (this is the only time this code is ever reached)

		if (last_childmask == last_lastmask)
		{
			// returning to a parent, which inherently cannot be a new node
			layer++;
			entered_new_node = false;
			continue;
		}

		// the node we just finished searching was not the last hit node within its parent - find the next hit sister node.
		uint last_masklist_index = bitfieldExtract(masklist_indices[last_mli_index], last_mli_bitfield_offset, MASKLIST_INDEX_SIZE);
		while ((last_masklist[last_masklist_index] & last_childmask) != 0u)
		{
			// find next valid masklist element
			//masklist_indices[idx-1]++;
			last_masklist_index++;
			masklist_indices[last_mli_index] = bitfieldInsert(masklist_indices[last_mli_index], last_masklist_index, last_mli_bitfield_offset, MASKLIST_INDEX_SIZE);
		}
		// now re-generate childmask
		//childmasks[idx-1] |= masklists[idx-1][masklist_indices[idx-1]];
		childmasks[last_mask_index] = bitfieldInsert(childmasks[last_mask_index], last_childmask | last_masklist[last_masklist_index], last_mask_bitfield_offset, MASK_SIZE);
		slmask = last_masklist[last_masklist_index];
		entered_new_node = true;
		in_first_child = false;
		continue;
	}

	// calculate the updated voxel position
	ray.distance_traveled -= 0.01;
	vec3 location_adder = v * ray.distance_traveled;
	ray.world_location.dec_component += location_adder;
	ray.world_location.int_component += ivec3(floor(ray.world_location.dec_component));
	ray.world_location.dec_component -= floor(ray.world_location.dec_component);
	return voxel_type;
}


uint rayMarch(inout Ray ray)
{
	//uint max_steps = uint(pow(8, num_layers));
	//uint max_steps = 1u << (LOG2K*(num_layers));
	uint max_steps = 128;
	uint num_steps;
	for (num_steps = 0; num_steps < max_steps; num_steps++)
	{
		if (!rayMarchSingleStep(ray))
		{
			return getVoxelType(ray.world_location);
		}
	}
}


bool rayMarchSingleStep(inout Ray ray)
{
	uint indirection_pointer = 0;
	uint current_node_index = 0;
	int layer = num_layers - 1;
	uint bitfield_ander = 0xFFFFFFFFu >> (32-LOG2K);
	// discover the current layer's location within the indirection pool
	// starting at the top layer, descend until a uniform layer is reached
	for (; layer >= 0; layer--)
	{
		int bitfieldOffset = LOG2K*layer;
		current_node_index = 0;
		current_node_index |= ((ray.world_location.int_component.x >> bitfieldOffset) & bitfield_ander);
		current_node_index |= ((ray.world_location.int_component.y >> bitfieldOffset) & bitfield_ander) << LOG2K; 
		current_node_index |= ((ray.world_location.int_component.z >> bitfieldOffset) & bitfield_ander) << (2*LOG2K);
		/*
		current_node_index = bitfieldInsert(current_node_index, bitfieldExtract(ray.world_location.int_component.x, bitfieldOffset, 3), 0, 3);
		current_node_index = bitfieldInsert(current_node_index, bitfieldExtract(ray.world_location.int_component.y, bitfieldOffset, 3), 3, 3);
		current_node_index = bitfieldInsert(current_node_index, bitfieldExtract(ray.world_location.int_component.z, bitfieldOffset, 3), 6, 3);
		*/
		
		if (layer == 0) break;

		if (readUniformityPool(indirection_pointer, current_node_index) == 1)
		{
			break;
		}

		uint new_indirection_pointer = readIndirectionPool(indirection_pointer, current_node_index);
		if (new_indirection_pointer == 0)
		{
			break;
		}
		indirection_pointer = new_indirection_pointer;
	}
	uint voxel_type = readVoxelTypePool(indirection_pointer, current_node_index);
	if (voxel_type != 0)
	{
		return false;
	}

	//bvec3 axis_leaves_boundary = bvec3(false);

	//if (indirection_pointer != ray.previous_indirection_pointer || !ray.valid_indirection_pointer)
	if (layer != ray.previous_layer)
	{
		// need to find next intersections
		for (uint i = 0; i < 3; i++)
		{
			findNextIntersection(ray, layer, i);
		}
	}

	// calculate distances to each intersection
	// TODO: convert to ufvec3
	/*
	vec3 distances_to_intersections;
	distances_to_intersections.x = length((vec3(ray.next_x_intersection.int_component)+ray.next_x_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));
	distances_to_intersections.y = length((vec3(ray.next_y_intersection.int_component)+ray.next_y_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));
	distances_to_intersections.z = length((vec3(ray.next_z_intersection.int_component)+ray.next_z_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));
	*/

	float min_distance = min(min(ray.distances_to_intersections.x, ray.distances_to_intersections.y), ray.distances_to_intersections.z);
	/*
	float min_distance;
	if (distances_to_intersections.x <= distances_to_intersections.y && distances_to_intersections.x <= distances_to_intersections.z) min_distance = distances_to_intersections.x;
	else if (distances_to_intersections.y <= distances_to_intersections.z) min_distance = distances_to_intersections.y;
	else min_distance = distances_to_intersections.z;
	*/
	// step the ray forward
	uint xyz_index;
	if (ray.distances_to_intersections.x == min_distance)
	{
		xyz_index = 0;
	}
	else if (ray.distances_to_intersections.y == min_distance)
	{
		xyz_index = 1;
	}
	else
	{
		xyz_index = 2;
	}
	ray.distance_traveled += min_distance;
	ray.world_location = ray.next_intersections[xyz_index];
	ray.distances_to_intersections -= min_distance;

	if (ray.next_intersection_leaves_boundary[xyz_index])
	{
		//ray.world_location.int_component[xyz_index] += int(sign(ray.direction[xyz_index]));
		if (ray.direction[xyz_index] >= 0.0)
		{
			ray.world_location.int_component[xyz_index]--;
			ray.world_location.dec_component[xyz_index] = 1.0;
		}
		else
		{
			ray.world_location.int_component[xyz_index]++;
			ray.world_location.dec_component[xyz_index] = 0.0;
		}
		return false;
	}

	// find new next intersection
	findNextIntersection(ray, layer, xyz_index);

	ray.previous_layer = layer;

	return true;
}


void findNextIntersection(inout Ray ray, in uint layer, in uint xyz_index)
{
	ufvec3 next_intersection = ray.world_location;

	// find location of the outer edge in the general direction of the ray
	uinfl outer_edge_location;
	uint max_value_within_layer_single_axis = (0xFFFFFFFFu >> (32-(LOG2K*layer)));
	if (layer == 0) max_value_within_layer_single_axis = 0u; // 1 >> 1 = 1: special case
	bool axis_leaves_boundary = false;

	uinfl difference;
	if (ray.direction[xyz_index] >= 0.0)
	{
		outer_edge_location.int_component = (ray.world_location.int_component[xyz_index] | max_value_within_layer_single_axis) + 1;
		outer_edge_location.dec_component = 0.0;
		difference.int_component = (outer_edge_location.int_component - 1) - ray.world_location.int_component[xyz_index];
		difference.dec_component = 1.0 - ray.world_location.dec_component[xyz_index];

		if (outer_edge_location.int_component - 1 == (0xFFFFFFFFu >> (32-(LOG2K*num_layers))))
			axis_leaves_boundary = true;
	}
	else
	{
		outer_edge_location.int_component = (ray.world_location.int_component[xyz_index] & ~max_value_within_layer_single_axis) - 1;
		outer_edge_location.dec_component = 1.0;
		difference.int_component = ray.world_location.int_component[xyz_index] - (outer_edge_location.int_component + 1);
		difference.dec_component = ray.world_location.dec_component[xyz_index];

		if (outer_edge_location.int_component + 1 == 0u)
			axis_leaves_boundary = true;
	}


	// solve for next intersections
	/*
	float tmp = float(differences.int_component) / ray.direction;
	ufvec3 tmp_ivec3;
	tmp_ivec3.int_component = uvec3(tmp);
	tmp_ivec3.dec_component = tmp - vec3(tmp_vec3.int_component);
	ufvec3 tmp_vec3;
	tmp_vec3.int_component = uvec3(0);
	tmp_vec3.dec_component = differences.dec_component / ray.direction;
	ufvec3 travel_multipliers = uf3Add(tmp_ivec3, tmp_vec3);
	*/

	// solve for next intersection
	// TODO: use uinfl for travel_multiplier - current method is lossy at higher values
	float euclidean_distance = (float(difference.int_component) + difference.dec_component) / abs(ray.direction[xyz_index]);

	// solve for next intersection
	next_intersection.int_component[xyz_index] = outer_edge_location.int_component;
	next_intersection.dec_component[xyz_index] = outer_edge_location.dec_component;

	for (uint i = 1; i < 3; i++)
	{
		uint anti_xyz_index = uint(mod(xyz_index+i, 3));
		float tmp = float(ray.world_location.int_component[anti_xyz_index]) + ray.world_location.dec_component[anti_xyz_index];
		tmp += ray.direction[anti_xyz_index] * euclidean_distance;
		next_intersection.int_component[anti_xyz_index] = uint(tmp);
		next_intersection.dec_component[anti_xyz_index] = tmp - float(next_intersection.int_component[anti_xyz_index]);
	}

	ray.next_intersections[xyz_index] = next_intersection;

	ray.next_intersection_leaves_boundary[xyz_index] = axis_leaves_boundary;
	//ray.distances_to_intersections[xyz_index] = (float(difference.int_component) + difference.dec_component) / abs(ray.direction[xyz_index]);
	ray.distances_to_intersections[xyz_index] = euclidean_distance;
	//ray.distances_to_intersections[xyz_index] = length((vec3(next_intersection.int_component)+next_intersection.dec_component) - (vec3(ray.world_location.int_component)+ray.world_location.dec_component));

	return;
}


ufvec3 uf3Add(in ufvec3 first, in ufvec3 second)
{
	ufvec3 result;
	result.int_component = first.int_component + second.int_component;
	result.dec_component = first.dec_component + second.dec_component;
	if (result.dec_component.x >= 1.0)
	{
		result.dec_component.x -= 1.0;
		result.int_component.x += 1;
	}
	if (result.dec_component.x < 0.0)
	{
		result.dec_component.x += 1.0;
		result.int_component.x -= 1;
	}
	if (result.dec_component.y >= 1.0)
	{
		result.dec_component.y -= 1.0;
		result.int_component.y += 1;
	}
	if (result.dec_component.y < 0.0)
	{
		result.dec_component.y += 1.0;
		result.int_component.y -= 1;
	}
	if (result.dec_component.z >= 1.0)
	{
		result.dec_component.z -= 1.0;
		result.int_component.z += 1;
	}
	if (result.dec_component.z < 0.0)
	{
		result.dec_component.z += 1.0;
		result.int_component.z -= 1;
	}

	return result;
}


uint readIndirectionPool(in uint base_location, in uint node_index)
{
	//return indirection_pool[(base_location << (3*LOG2K)) | node_index];
	return octree[(base_location << (3*LOG2K)) | node_index].indirection;
}


uint readUniformityPool(in uint base_location, in uint node_index)
{
	//uint tmp = indirection_pool[(base_location << (3*LOG2K)) | node_index];
	uint tmp = octree[(base_location << (3*LOG2K)) | node_index].indirection;
	if (tmp == 0u) return 1u;
	return 0u;
}


uint readVoxelTypePool(in uint base_location, in uint node_index)
{
	//return voxel_type_pool[(base_location << (3*LOG2K)) | node_index];
	return octree[(base_location << (3*LOG2K)) | node_index].voxel_type;
}
